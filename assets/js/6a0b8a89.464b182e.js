"use strict";(self.webpackChunkshunyainterfaces=self.webpackChunkshunyainterfaces||[]).push([[324],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5608:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=(n(4996),["components"]),s={id:49694,title:"Implement Internet radio station on Brainy Pi",description:"Implement Internet radio station on Brainy Pi",image:"img/default-image.png",keywords:["audio/video streaming server","radio","supports mp3"]},p=void 0,l={unversionedId:"projects/49694",id:"projects/49694",title:"Implement Internet radio station on Brainy Pi",description:"Implement Internet radio station on Brainy Pi",source:"@site/docs/projects/49694.md",sourceDirName:"projects",slug:"/projects/49694",permalink:"/brainypi-projects-showcase/docs/projects/49694",draft:!1,tags:[],version:"current",frontMatter:{id:"49694",title:"Implement Internet radio station on Brainy Pi",description:"Implement Internet radio station on Brainy Pi",image:"img/default-image.png",keywords:["audio/video streaming server","radio","supports mp3"]},sidebar:"projectsSidebar",previous:{title:"Implement IRC server on Brainy Pi",permalink:"/brainypi-projects-showcase/docs/projects/49692"},next:{title:"Implement Sysmon on Brainy Pi",permalink:"/brainypi-projects-showcase/docs/projects/49905"}},c={},m=[],u={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Description:"),"  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Icecast is an audio/video streaming media server that can be used to create everything\nfrom Internet radio stations to privately running music playlists. "),(0,i.kt)("li",{parentName:"ul"},"DarkIce is a live audio streamer capable of recording audio from an audio interface (e.g., a sound card), encodes the audio, and sends it to a streaming server.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Image:")," Should be in insta format."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Steps to install:-")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy and paste the following lines into a terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Wget https://github.com/x20mar/darkice-with-mp3-for-raspberrpi/blob/master/darkice_1.0.1- \n999~mp3+1_armhf.deb?raw=true mv darkice_1.0.1-999~mp3+1_armhf.deb?raw=true darkice_1.0.1- \n999~mp3+1_armhf.deb\nsudo apt-get install libmp3lame0 libtwolame0\nsudo dpkg -i darkice_1.0.1-999~mp3+1_armhf.deb\n\nsudo apt-get install icecast2\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"During the installation process, it will ask you if you want to configure Icecast2.",(0,i.kt)("br",{parentName:"p"}),"\n","Select ",(0,i.kt)("inlineCode",{parentName:"p"},"Yes"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The next screen will ask you to specify the domain name. "))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Select ",(0,i.kt)("inlineCode",{parentName:"li"},"OK"),' to use the default hostname "localhost".')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Now, in the next steps, you will be required to add 3 passwords.  ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first one is to control access to media sources.  "),(0,i.kt)("li",{parentName:"ul"},"The second is to use stream relays.  "),(0,i.kt)("li",{parentName:"ul"},"The third password is to grant access to the administration console."),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("inlineCode",{parentName:"li"},"ok")," to use the default password."),(0,i.kt)("li",{parentName:"ul"},"The default username will be \u201cadmin\u201d.")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the below command."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo nano darkice.cfg\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Then copy and paste these configurations in the file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# this section describes general aspects of the live streaming session\n[general]\nduration     = 0     # duration of encoding, in seconds. 0 means forever\nbufferSecs   = 5     # size of internal slip buffer, in seconds\nreconnect    = yes   # reconnect to the server(s) if disconnected\n# this section describes the audio input that will be streamed\n[input]\ndevice          = plughw:0,0  # Soundcard device for the audio input\nsampleRate      = 22050     # sample rate in Hz. try 11025, 22050 or 44100\nbitsPerSample   = 16        # bits per sample. try 16\nchannel         = 2         # channels. 1 = mono, 2 = stereo\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n[icecast2-0]\nbitrateMode     = abr       # average bit rate\nformat          = mp3       # format of the stream: ogg vorbis\nbitrate         = 320       # bitrate of the stream sent to the server\nserver          = localhost # host name of the server\nport            = 8000      # port of the IceCast2 server, usually 8000\npassword        = lolcat123 # source password to the IceCast2 server\nmountPoint      = Stream.mp3  # mount point of this stream on the IceCast2 server\nname            =  Raspberry Pi Stream # name of the stream\ndescription     = Broadcast from Raspberry Pi # description of the stream\n#public         = yes       advertise this stream?\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Save the changes using Ctrl+X ,then press Y ,and then Enter.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Then create another file named "darkice.sh" using the below command:'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo nano darkice.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Paste the below line in the file. This line contains the address to the configuration\nfile."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo /usr/bin/darkice -c /home/pi/darkice.cfg\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Then make the darkice.sh file executable using the below command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo chmod 777 /home/pi/darkice.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Next, start the Icecast2 service using the below command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo service icecast2 start\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Installation will be completed."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Useful for"),": audio/video streaming server, radio, supports mp3."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Link to original project:")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/xiph/Icecast-Server"},"https://github.com/xiph/Icecast-Server")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Link to Youtube Video:")))}d.isMDXComponent=!0}}]);