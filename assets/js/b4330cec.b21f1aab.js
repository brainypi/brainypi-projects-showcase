"use strict";(self.webpackChunkshunyainterfaces=self.webpackChunkshunyainterfaces||[]).push([[412],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,p(p({ref:t},c),{},{components:n})):r.createElement(d,p({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4043:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),p=n(4996),i=["components"],l={id:"apple-nas",title:"AppleShare on BrainyPi",description:"AppleShare on BrainyPi",image:"img/apple-nas.png",keywords:["AppleShare","NAS","iOS","Mac","File sharing","storage"]},s=void 0,c={unversionedId:"projects/apple-nas",id:"projects/apple-nas",title:"AppleShare on BrainyPi",description:"AppleShare on BrainyPi",source:"@site/docs/projects/apple-nas.md",sourceDirName:"projects",slug:"/projects/apple-nas",permalink:"/brainypi-projects-showcase/docs/projects/apple-nas",draft:!1,tags:[],version:"current",frontMatter:{id:"apple-nas",title:"AppleShare on BrainyPi",description:"AppleShare on BrainyPi",image:"img/apple-nas.png",keywords:["AppleShare","NAS","iOS","Mac","File sharing","storage"]},sidebar:"projectsSidebar",next:{title:"Captive Portal on BrainyPi",permalink:"/brainypi-projects-showcase/docs/projects/captive-portal"}},u={},m=[],f={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description:")," The Apple Filing Protocol is Apple\u2019s proprietary network protocol for delivering files over a network. Netatalk is a freely-available Open Source AFP fileserver. A UNIX, Linux or BSD system running Netatalk is capable of serving many Macintosh clients simultaneously as an AppleShare file server (AFP)."),(0,o.kt)("img",{alt:"Oops!, No Image to display.",src:(0,p.Z)("img/apple-nas.png"),width:"200"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Steps to Install:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just copy and paste the following lines into a terminal:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\nsudo apt upgrade\n\nsudo apt install netatalk\n\nsudo nano /etc/netatalk/afp.conf\n")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now add the following lines into it."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"[Homes]\n  basedir regex = /home \n  path = <foldername>\n\n[My AFP Share Name]\n  path = /path/to/directory\n\n[My AFP Share Name]\n  path = /path/to/directory\n  time machine = true\n\n[My AFP Share Name]\n  path = /path/to/directory\n  read only = true\n\n[Global]\n  guest account = pi\n\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"With changes to the configuration complete, you can go ahead and save the file by pressing CTRL + X then Y followed by ENTER.")))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now run the following command."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"sudo systemctl restart netatalk\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Installation will be completed."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Useful for:")," AppleShare, NAS, iOS, Mac, File sharing, storage"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Link to original project:")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Netatalk/Netatalk"},"https://github.com/Netatalk/Netatalk")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Link to Youtube Video:")))}d.isMDXComponent=!0}}]);