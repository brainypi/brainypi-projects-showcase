"use strict";(self.webpackChunkshunyainterfaces=self.webpackChunkshunyainterfaces||[]).push([[395],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return u}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,h=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(h,o(o({ref:t},l),{},{components:r})):n.createElement(h,o({ref:t},l))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},987:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=r(4996),s=["components"],c={id:"radio-station",title:"\x3c!-- Describe the project in 1 sentence --\x3e",description:"\x3c!-- Describe the project in 1 sentence --\x3e",image:"img/radio-station.png",keywords:["audio/video streaming server","radio","supports mp3"]},p=void 0,l={unversionedId:"projects/radio-station",id:"projects/radio-station",title:"\x3c!-- Describe the project in 1 sentence --\x3e",description:"\x3c!-- Describe the project in 1 sentence --\x3e",source:"@site/docs/projects/radio-station.md",sourceDirName:"projects",slug:"/projects/radio-station",permalink:"/brainypi-projects-showcase/docs/projects/radio-station",draft:!1,tags:[],version:"current",frontMatter:{id:"radio-station",title:"\x3c!-- Describe the project in 1 sentence --\x3e",description:"\x3c!-- Describe the project in 1 sentence --\x3e",image:"img/radio-station.png",keywords:["audio/video streaming server","radio","supports mp3"]},sidebar:"projectsSidebar",previous:{title:"Proxy Server on BrainyPi",permalink:"/brainypi-projects-showcase/docs/projects/privoxy"},next:{title:"Digital Signage on Brainy Pi",permalink:"/brainypi-projects-showcase/docs/projects/screenly"}},m={},d=[],u={toc:d};function h(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Description:")," Icecast is an audio/video streaming media server that can be used to create everything\nfrom Internet radio stations to privately running music playlists. DarkIce is a live audio streamer capable of recording audio from an audio interface (e.g., a sound card), encodes the audio, and sends it to a streaming server."),(0,i.kt)("img",{alt:"Oops!, No Image to display.",src:(0,o.Z)("img/radio-station.png"),width:"200"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Steps to Install:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy and paste the following lines into a terminal:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Wget https://github.com/x20mar/darkice-with-mp3-for-raspberrpi/blob/master/darkice_1.0.1- \n999~mp3+1_armhf.deb?raw=true mv darkice_1.0.1-999~mp3+1_armhf.deb?raw=true darkice_1.0.1- \n999~mp3+1_armhf.deb\nsudo apt-get install libmp3lame0 libtwolame0\nsudo dpkg -i darkice_1.0.1-999~mp3+1_armhf.deb\n\nsudo apt-get install icecast2\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"During the installation process, it will ask you if you want to configure Icecast2.",(0,i.kt)("br",{parentName:"p"}),"\n","Select ",(0,i.kt)("inlineCode",{parentName:"p"},"Yes"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The next screen will ask you to specify the domain name. "))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Select ",(0,i.kt)("inlineCode",{parentName:"li"},"OK"),' to use the default hostname "localhost".')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Now, in the next steps, you will be required to add 3 passwords.  ")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first one is to control access to media sources.  "),(0,i.kt)("li",{parentName:"ul"},"The second is to use stream relays.  "),(0,i.kt)("li",{parentName:"ul"},"The third password is to grant access to the administration console."),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("inlineCode",{parentName:"li"},"ok")," to use the default password."),(0,i.kt)("li",{parentName:"ul"},"The default username will be \u201cadmin\u201d.")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the below command."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo nano darkice.cfg\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Then copy and paste these configurations in the file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# this section describes general aspects of the live streaming session\n[general]\nduration     = 0     # duration of encoding, in seconds. 0 means forever\nbufferSecs   = 5     # size of internal slip buffer, in seconds\nreconnect    = yes   # reconnect to the server(s) if disconnected\n# this section describes the audio input that will be streamed\n[input]\ndevice          = plughw:0,0  # Soundcard device for the audio input\nsampleRate      = 22050     # sample rate in Hz. try 11025, 22050 or 44100\nbitsPerSample   = 16        # bits per sample. try 16\nchannel         = 2         # channels. 1 = mono, 2 = stereo\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n[icecast2-0]\nbitrateMode     = abr       # average bit rate\nformat          = mp3       # format of the stream: ogg vorbis\nbitrate         = 320       # bitrate of the stream sent to the server\nserver          = localhost # host name of the server\nport            = 8000      # port of the IceCast2 server, usually 8000\npassword        = lolcat123 # source password to the IceCast2 server\nmountPoint      = Stream.mp3  # mount point of this stream on the IceCast2 server\nname            =  Raspberry Pi Stream # name of the stream\ndescription     = Broadcast from Raspberry Pi # description of the stream\n#public         = yes       advertise this stream?\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Save the changes using Ctrl+X ,then press Y ,and then Enter.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Then create another file named "darkice.sh" using the below command:'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo nano darkice.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Paste the below line in the file. This line contains the address to the configuration\nfile."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo /usr/bin/darkice -c /home/pi/darkice.cfg\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Then make the darkice.sh file executable using the below command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo chmod 777 /home/pi/darkice.sh\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Next, start the Icecast2 service using the below command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sudo service icecast2 start\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Installation will be completed."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Useful for"),": audio/video streaming server, radio, supports mp3."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Link to original project:")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/xiph/Icecast-Server"},"https://github.com/xiph/Icecast-Server")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Link to Youtube Video:")," "))}h.isMDXComponent=!0}}]);